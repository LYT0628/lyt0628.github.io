<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 19 May 2024 21:54:38 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ThreeJs_官方教程_Demo2</title>
      <link>http://localhost:1313/posts/threejs_%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B_demo2/</link>
      <pubDate>Sun, 19 May 2024 21:54:38 +0800</pubDate>
      <guid>http://localhost:1313/posts/threejs_%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B_demo2/</guid>
      <description> </description>
    </item>
    <item>
      <title>Hello Hugo</title>
      <link>http://localhost:1313/posts/hello-hugo/</link>
      <pubDate>Mon, 08 Apr 2024 02:27:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/hello-hugo/</guid>
      <description></description>
    </item>
    <item>
      <title>ThreeJs_官方教程_Demo1</title>
      <link>http://localhost:1313/posts/three_%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B_demo1/</link>
      <pubDate>Mon, 08 Apr 2024 02:27:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/three_%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B_demo1/</guid>
      <description> </description>
    </item>
    <item>
      <title>测试主机序的程序</title>
      <link>http://localhost:1313/posts/byteorder/</link>
      <pubDate>Mon, 08 Apr 2024 02:27:31 +0800</pubDate>
      <guid>http://localhost:1313/posts/byteorder/</guid>
      <description>使用C语言数组进行主机字节序的测量</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/lib_gson-2024-05-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lib_gson-2024-05-16/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&gt; lib-gson lib-gson Table of Contents 1. 创建 Gson 对象 2. 准备实体类 3. 对象序列化 4. Json转对象 5. 格式化输出 6. 数组Json转Array 7. 数组Json转List(Collection) 1. 创建 Gson 对象 new Gson(); System.out.println(new Gson()); GsonBuilder builder = new GsonBuilder(); Gson gson = builder.create(); 2. 准备实体类 @Data @AllArgsConstructor class Employee { private int id; private String firstName; private String lastName; //省略getter/setter，构造方法，toSting方法 } 3. 对象序列化 public class Main{ public static void main(String[] args) { var e = new Employee(); e.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/posts/pytorch_tensor-2024-05-12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/pytorch_tensor-2024-05-12/</guid>
      <description>&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34; &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&gt; pytorch-Tensor pytorch-Tensor Table of Contents 1. 创建张量 1.1. 从Python 类型创建 1.2. 从 numpy类型创建 1.2.1. torch.Tensor 转 Numpy 1.3. 从已有的 torch.Tensor 创建 1.4. 创建高斯分布张量 1.5. 创建零张量 2. 张量类型转换 3. 张量形状操作 3.1. 获取张量形状 3.2. 修改张量形状 3.2.1. 转置 3.3. 维度压缩 4. 原型和子视图 5. 切片 6. 拼接 7. 四则运算 8. 矩阵乘法 9. 其他 1. 创建张量 1.1. 从Python 类型创建 import torch x1 = [1, 2, 3] x1_tensor = torch.</description>
    </item>
  </channel>
</rss>
